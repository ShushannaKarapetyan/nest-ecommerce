// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  avatarPath String   @default("/uploads/default-avatar.png") @map("avatar_path")
  phone      String   @default("")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  orders    Order[]
  reviews   Review[]
  favorites Product[]

  @@map("users")
}

model Product {
  id          Int      @id @default(autoincrement())
  categoryId  Int?     @map("category_id")
  name        String   @unique
  slug        String   @unique
  description String
  price       Float
  quantity    Int
  images      String[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  orderItems OrderItem[]
  reviews    Review[]
  category   Category?   @relation(fields: [categoryId], references: [id])
  user       User?       @relation(fields: [userId], references: [id])
  userId     Int?        @map("user_id")

  @@map("products")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  products Product[]

  @@map("categories")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  rating    Int
  text      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Order {
  id        Int             @id @default(autoincrement())
  status    EnumOrderStatus @default(PENDING)
  user      User            @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @default(now()) @map("updated_at")

  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int?     @map("order_id")
  productId Int      @map("product_id")
  quantity  Int
  price     Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  order   Order?  @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum EnumOrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
}
